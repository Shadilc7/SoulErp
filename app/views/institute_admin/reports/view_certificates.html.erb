<div class="container-fluid py-4" data-controller="certificate-publisher">
  <%= render 'certificate_breadcrumb', current_page: "View Certificates" %>

  <div class="card card-custom">
    <div class="card-header card-header-custom">
      <div class="d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Generated Certificates</h5>
        <div>
          <%= button_tag type: 'button', class: 'btn btn-success btn-sm me-2', id: 'publishSelected', disabled: true do %>
            <i class="bi bi-check2-all me-1"></i>Publish Selected
          <% end %>
          <%= button_tag type: 'button', class: 'btn btn-success btn-sm me-2', id: 'publishAll' do %>
            <i class="bi bi-check2-all me-1"></i>Publish All
          <% end %>
          <%= link_to generate_certificate_institute_admin_reports_path, class: "btn btn-primary btn-sm" do %>
            <i class="bi bi-plus-circle me-1"></i>Generate New Certificate
          <% end %>
        </div>
      </div>
    </div>

    <div class="card-body">
      <% if @certificates.any? %>
        <!-- Filters -->
        <div class="filters mb-4 p-3 bg-light rounded-3">
          <div class="row g-3">
            <div class="col-md-9">
              <select class="form-select" id="sectionFilter">
                <option value="">All Sections</option>
                <% current_institute.sections.active.each do |section| %>
                  <option value="<%= section.id %>"><%= section.name %></option>
                <% end %>
              </select>
            </div>
            <div class="col-md-3">
              <button class="btn btn-secondary w-100" id="resetFilters">
                <i class="bi bi-x-circle me-1"></i> Reset
              </button>
            </div>
          </div>
        </div>

        <div class="table-responsive">
          <table class="table align-middle">
            <thead>
              <tr>
                <th width="40">
                  <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="selectAll">
                  </div>
                </th>
                <th>Assignment</th>
                <th>Participant</th>
                <th>Generated</th>
                <th>Status</th>
                <th class="text-end">Actions</th>
              </tr>
            </thead>
            <tbody>
              <% @certificates.each do |certificate| %>
                <tr class="certificate-row" 
                    data-section="<%= certificate.participant.section.id %>">
                  <td>
                    <div class="form-check">
                      <input class="form-check-input certificate-checkbox" type="checkbox" 
                             value="<%= certificate.id %>" 
                             <%= 'checked disabled' if certificate.published? %>>
                    </div>
                  </td>
                  <td>
                    <%= certificate.assignment.title %>
                    <br>
                    <small class="text-muted">
                      <%= certificate.assignment.start_date.strftime("%b %d") %> - 
                      <%= certificate.assignment.end_date.strftime("%b %d, %Y") %>
                    </small>
                  </td>
                  <td>
                    <%= certificate.participant.user.full_name %>
                    <br>
                    <small class="text-muted"><%= certificate.participant.section&.name || "No Section" %></small>
                  </td>
                  <td><%= certificate.generated_at.strftime("%b %d, %Y") %></td>
                  <td>
                    <span class="badge <%= certificate.published? ? 'bg-success' : 'bg-secondary' %>">
                      <%= certificate.published? ? 'Published' : 'Not Published' %>
                    </span>
                  </td>
                  <td>
                    <div class="d-flex gap-2 justify-content-end">
                      <%= link_to view_certificate_institute_admin_reports_path(certificate, format: :pdf),
                          class: "btn btn-sm btn-outline-primary",
                          title: "View Certificate",
                          target: "_blank" do %>
                        <i class="bi bi-eye"></i> View
                      <% end %>
                      
                      <%= link_to toggle_publish_certificate_institute_admin_report_path(certificate),
                          class: "btn btn-sm #{certificate.published? ? 'btn-outline-warning' : 'btn-outline-success'}",
                          title: certificate.published? ? "Unpublish" : "Publish",
                          data: { turbo_method: :post, turbo_confirm: "Are you sure you want to #{certificate.published? ? 'unpublish' : 'publish'} this certificate?" } do %>
                        <i class="bi <%= certificate.published? ? 'bi-eye-slash' : 'bi-eye' %>"></i>
                        <%= certificate.published? ? 'Unpublish' : 'Publish' %>
                      <% end %>

                      <%= link_to download_certificate_institute_admin_reports_path(certificate, format: :pdf),
                          class: "btn btn-sm btn-outline-secondary",
                          title: "Download Certificate" do %>
                        <i class="bi bi-download"></i> Download
                      <% end %>

                      <%= button_to delete_certificate_institute_admin_reports_path(certificate),
                          method: :delete,
                          class: "btn btn-sm btn-outline-danger",
                          form: { style: 'display: inline-block' },
                          data: { turbo_confirm: "Are you sure you want to delete this certificate?" } do %>
                        <i class="bi bi-trash"></i> Delete
                      <% end %>
                    </div>
                  </td>
                </tr>
              <% end %>
            </tbody>
          </table>
        </div>

        <!-- Pagination -->
        <div class="d-flex justify-content-between align-items-center mt-4">
          <div class="text-muted small">
            Showing <%= @certificates.offset_value + 1 %> to <%= @certificates.offset_value + @certificates.length %> of <%= @certificates.total_count %> certificates
          </div>
          <%= paginate @certificates %>
        </div>
      <% else %>
        <div class="text-center py-5">
          <div class="mb-3">
            <i class="bi bi-award text-secondary" style="font-size: 4rem;"></i>
          </div>
          <h5 class="text-secondary">No certificates generated yet</h5>
          <p class="text-muted">Generate certificates from the certificate generation page</p>
          <%= link_to generate_certificate_institute_admin_reports_path, class: "btn btn-primary mt-2" do %>
            <i class="bi bi-plus-circle me-1"></i> Generate Certificate
          <% end %>
        </div>
      <% end %>
    </div>
  </div>
</div>

<%= csrf_meta_tags %>
<%= turbo_include_tags %>

<% content_for :styles do %>
  <style>
    .card-custom {
      border: none;
      border-radius: 0.5rem;
    }

    .card-header-custom {
      background-color: transparent;
      border-bottom: 1px solid rgba(0,0,0,0.1);
    }

    .table td {
      vertical-align: middle;
    }

    .filters {
      background-color: #f8f9fa;
      border: 1px solid #e9ecef;
    }

    .btn {
      display: inline-flex;
      align-items: center;
      gap: 0.25rem;
    }
  </style>
<% end %>

<% content_for :scripts do %>
<script>
document.addEventListener('turbo:load', function() {
  initializeView();
  initializeBarChart();
});

function initializeBarChart() {
  const chartCanvas = document.getElementById('certificatesBarChart');
  if (!chartCanvas) return;

  const chartColors = [
    '#4e73df', '#1cc88a', '#36b9cc', '#f6c23e', '#e74a3b',
    '#6610f2', '#6f42c1', '#fd7e14', '#20c997', '#5a5c69'
  ];

  new Chart(chartCanvas, {
    type: 'bar',
    data: {
      labels: <%= raw @section_certificate_counts.keys.to_json %>,
      datasets: [{
        label: 'Certificates',
        data: <%= raw @section_certificate_counts.values.to_json %>,
        backgroundColor: '#4e73df',
        borderColor: '#3a5ccc',
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
            precision: 0
          }
        }
      },
      plugins: {
        legend: {
          display: false
        },
        title: {
          display: true,
          text: 'Number of Certificates by Section'
        }
      }
    }
  });
}

document.addEventListener('turbo:load', initializeView);

function initializeView() {
  const selectAll = document.getElementById('selectAll');
  const certificateCheckboxes = document.querySelectorAll('.certificate-checkbox:not(:disabled)');
  const publishSelected = document.getElementById('publishSelected');
  const publishAll = document.getElementById('publishAll');
  const sectionFilter = document.getElementById('sectionFilter');
  const resetFilters = document.getElementById('resetFilters');

  if (!selectAll || !publishSelected || !publishAll) return;

  function updatePublishSelectedButton() {
    const checkedCount = document.querySelectorAll('.certificate-checkbox:checked:not(:disabled)').length;
    publishSelected.disabled = checkedCount === 0;
    publishSelected.innerHTML = `<i class="bi bi-check2-all me-1"></i>Publish Selected (${checkedCount})`;
  }

  // Select All functionality
  selectAll.addEventListener('change', function() {
    certificateCheckboxes.forEach(checkbox => {
      if (checkbox.closest('tr').style.display !== 'none') {
        checkbox.checked = this.checked;
      }
    });
    updatePublishSelectedButton();
  });

  // Individual checkbox change
  certificateCheckboxes.forEach(checkbox => {
    checkbox.addEventListener('change', function() {
      updatePublishSelectedButton();
      
      // Update select all checkbox state
      const visibleCheckboxes = Array.from(certificateCheckboxes).filter(cb => 
        cb.closest('tr').style.display !== 'none'
      );
      selectAll.checked = visibleCheckboxes.every(cb => cb.checked);
    });
  });

  // Filter functionality
  function filterCertificates() {
    const selectedSection = sectionFilter.value;
    
    document.querySelectorAll('.certificate-row').forEach(row => {
      const matchesSection = !selectedSection || row.dataset.section === selectedSection;
      row.style.display = matchesSection ? '' : 'none';
    });
    
    // Reset checkboxes and update button state
    selectAll.checked = false;
    certificateCheckboxes.forEach(cb => cb.checked = false);
    updatePublishSelectedButton();
  }

  sectionFilter.addEventListener('change', filterCertificates);
  
  resetFilters.addEventListener('click', function() {
    sectionFilter.value = '';
    filterCertificates();
  });

  // Publishing functionality
  publishSelected.addEventListener('click', function() {
    const selectedIds = Array.from(document.querySelectorAll('.certificate-checkbox:checked:not(:disabled)'))
      .map(checkbox => checkbox.value);
    
    if (selectedIds.length > 0 && confirm(`Are you sure you want to publish ${selectedIds.length} selected certificate(s)?`)) {
      publishCertificates(selectedIds);
    }
  });

  publishAll.addEventListener('click', function() {
    const allIds = Array.from(document.querySelectorAll('.certificate-checkbox:not(:disabled)'))
      .filter(checkbox => checkbox.closest('tr').style.display !== 'none')
      .map(checkbox => checkbox.value);
    
    if (allIds.length > 0 && confirm(`Are you sure you want to publish all ${allIds.length} unpublished certificate(s)?`)) {
      publishCertificates(allIds);
    } else if (allIds.length === 0) {
      alert('No unpublished certificates found.');
    }
  });

  function publishCertificates(certificateIds) {
    const token = document.querySelector('meta[name="csrf-token"]')?.content;
    if (!token) {
      console.error('CSRF token not found');
      return;
    }

    fetch('/institute_admin/reports/publish_multiple_certificates', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': token
      },
      body: JSON.stringify({ certificate_ids: certificateIds })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        window.location.reload();
      } else {
        alert('Failed to publish certificates: ' + (data.message || 'Unknown error'));
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred while publishing certificates');
    });
  }

  // Initialize view
  updatePublishSelectedButton();
}
</script>
<% end %>